#! /usr/bin/env python
# -*- coding:utf8 -*-
#
# hookes.py
#
# This file is part of the anisutils package
#
# Copyright Â© 2021 Mathieu Gaborit (matael) <mathieu@matael.org>
#
# Licensed under the "THE BEER-WARE LICENSE" (Revision 42):
# Mathieu (matael) Gaborit wrote this file. As long as you retain this notice
# you can do whatever you want with this stuff. If we meet some day, and you
# think this stuff is worth it, you can buy me a beer or coffee in return
#

import numpy as np


def Hij_to_cijkl(H):
    """Convert a Hooke's matrix to the corresponding rigidity tensor

    Parameters
    ----------

    H: 6x6 iterable or dict
        The Hooke's matrix to be converted. If not already a np.ndarray, an iterable must
        be castable to one.

    Returns
    -------

    c: 3x3x3x3 np.ndarray
        The corresponding 4th order rigidity tensor
    """

    if type(H) == dict:
        c = np.empty((3,3,3,3), dtype=type(H[1][1]))
        c[0,0,0,0] = H[1][1]
        c[0,0,1,1] = H[1][2]
        c[0,0,2,2] = H[1][3]
        c[0,0,1,2] = H[1][4]; c[0,0,2,1] = H[1][4]
        c[0,0,0,2] = H[1][5]; c[0,0,2,0] = H[1][5]
        c[0,0,0,1] = H[1][6]; c[0,0,1,0] = H[1][6]

        c[1,1,0,0] = H[1][2]
        c[1,1,1,1] = H[2][2]
        c[1,1,2,2] = H[2][3]
        c[1,1,1,2] = H[2][4]; c[1,1,2,1] = H[2][4]
        c[1,1,0,2] = H[2][5]; c[1,1,2,0] = H[2][5]
        c[1,1,0,1] = H[2][6]; c[1,1,1,0] = H[2][6]

        c[2,2,0,0] = H[1][3]
        c[2,2,1,1] = H[2][3]
        c[2,2,2,2] = H[3][3]
        c[2,2,1,2] = H[3][4]; c[2,2,2,1] = H[3][4]
        c[2,2,0,2] = H[3][5]; c[2,2,2,0] = H[3][5]
        c[2,2,0,1] = H[3][6]; c[2,2,1,0] = H[3][6]

        c[2,1,0,0] = H[1][4]
        c[2,1,1,1] = H[2][4]
        c[2,1,2,2] = H[3][4]
        c[2,1,1,2] = H[4][4]; c[2,1,2,1] = H[4][4]
        c[2,1,0,2] = H[4][5]; c[2,1,2,0] = H[4][5]
        c[2,1,0,1] = H[4][6]; c[2,1,1,0] = H[4][6]
        c[1,2,0,0] = H[1][4]
        c[1,2,1,1] = H[2][4]
        c[1,2,2,2] = H[3][4]
        c[1,2,1,2] = H[4][4]; c[1,2,2,1] = H[4][4]
        c[1,2,0,2] = H[4][5]; c[1,2,2,0] = H[4][5]
        c[1,2,0,1] = H[4][6]; c[1,2,1,0] = H[4][6]

        c[2,0,0,0] = H[1][5]
        c[2,0,1,1] = H[2][5]
        c[2,0,2,2] = H[3][5]
        c[2,0,1,2] = H[4][5]; c[2,0,2,1] = H[4][5]
        c[2,0,0,2] = H[5][5]; c[2,0,2,0] = H[5][5]
        c[2,0,0,1] = H[5][6]; c[2,0,1,0] = H[5][6]
        c[0,2,0,0] = H[1][5]
        c[0,2,1,1] = H[2][5]
        c[0,2,2,2] = H[3][5]
        c[0,2,1,2] = H[4][5]; c[0,2,2,1] = H[4][5]
        c[0,2,0,2] = H[5][5]; c[0,2,2,0] = H[5][5]
        c[0,2,0,1] = H[5][6]; c[0,2,1,0] = H[5][6]

        c[1,0,0,0] = H[1][6]
        c[1,0,1,1] = H[2][6]
        c[1,0,2,2] = H[3][6]
        c[1,0,1,2] = H[4][6]; c[1,0,2,1] = H[4][6]
        c[1,0,0,2] = H[5][6]; c[1,0,2,0] = H[5][6]
        c[1,0,0,1] = H[6][6]; c[1,0,1,0] = H[6][6]
        c[0,1,0,0] = H[1][6]
        c[0,1,1,1] = H[2][6]
        c[0,1,2,2] = H[3][6]
        c[0,1,1,2] = H[4][6]; c[0,1,2,1] = H[4][6]
        c[0,1,0,2] = H[5][6]; c[0,1,2,0] = H[5][6]
        c[0,1,0,1] = H[6][6]; c[0,1,1,0] = H[6][6]

    else:

        if not type(H) == np.ndarray:
            H = np.array(H)

        if H.shape[0] != 6 or H.shape[1] != 6:
            raise ValueError('H must be a 6x6 iterable and castable to np.ndarray')

        c = np.empty((3,3,3,3), dtype=H.dtype)
        c[0,0,0,0] = H[0,0]
        c[0,0,1,1] = H[0,1]
        c[0,0,2,2] = H[0,2]
        c[0,0,1,2] = H[0,3]; c[0,0,2,1] = H[0,3]
        c[0,0,0,2] = H[0,4]; c[0,0,2,0] = H[0,4]
        c[0,0,0,1] = H[0,5]; c[0,0,1,0] = H[0,5]

        c[1,1,0,0] = H[1,0]
        c[1,1,1,1] = H[1,1]
        c[1,1,2,2] = H[1,2]
        c[1,1,1,2] = H[1,3]; c[1,1,2,1] = H[1,3]
        c[1,1,0,2] = H[1,4]; c[1,1,2,0] = H[1,4]
        c[1,1,0,1] = H[1,5]; c[1,1,1,0] = H[1,5]

        c[2,2,0,0] = H[2,0]
        c[2,2,1,1] = H[2,1]
        c[2,2,2,2] = H[2,2]
        c[2,2,1,2] = H[2,3]; c[2,2,2,1] = H[2,3]
        c[2,2,0,2] = H[2,4]; c[2,2,2,0] = H[2,4]
        c[2,2,0,1] = H[2,5]; c[2,2,1,0] = H[2,5]

        c[2,1,0,0] = H[3,0]
        c[2,1,1,1] = H[3,1]
        c[2,1,2,2] = H[3,2]
        c[2,1,1,2] = H[3,3]; c[2,1,2,1] = H[3,3]
        c[2,1,0,2] = H[3,4]; c[2,1,2,0] = H[3,4]
        c[2,1,0,1] = H[3,5]; c[2,1,1,0] = H[3,5]
        c[1,2,0,0] = H[3,0]
        c[1,2,1,1] = H[3,1]
        c[1,2,2,2] = H[3,2]
        c[1,2,1,2] = H[3,3]; c[1,2,2,1] = H[3,3]
        c[1,2,0,2] = H[3,4]; c[1,2,2,0] = H[3,4]
        c[1,2,0,1] = H[3,5]; c[1,2,1,0] = H[3,5]

        c[2,0,0,0] = H[4,0]
        c[2,0,1,1] = H[4,1]
        c[2,0,2,2] = H[4,2]
        c[2,0,1,2] = H[4,3]; c[2,0,2,1] = H[4,3]
        c[2,0,0,2] = H[4,4]; c[2,0,2,0] = H[4,4]
        c[2,0,0,1] = H[4,5]; c[2,0,1,0] = H[4,5]
        c[0,2,0,0] = H[4,0]
        c[0,2,1,1] = H[4,1]
        c[0,2,2,2] = H[4,2]
        c[0,2,1,2] = H[4,3]; c[0,2,2,1] = H[4,3]
        c[0,2,0,2] = H[4,4]; c[0,2,2,0] = H[4,4]
        c[0,2,0,1] = H[4,5]; c[0,2,1,0] = H[4,5]

        c[1,0,0,0] = H[5,0]
        c[1,0,1,1] = H[5,1]
        c[1,0,2,2] = H[5,2]
        c[1,0,1,2] = H[5,3]; c[1,0,2,1] = H[5,3]
        c[1,0,0,2] = H[5,4]; c[1,0,2,0] = H[5,4]
        c[1,0,0,1] = H[5,5]; c[1,0,1,0] = H[5,5]
        c[0,1,0,0] = H[5,0]
        c[0,1,1,1] = H[5,1]
        c[0,1,2,2] = H[5,2]
        c[0,1,1,2] = H[5,3]; c[0,1,2,1] = H[5,3]
        c[0,1,0,2] = H[5,4]; c[0,1,2,0] = H[5,4]
        c[0,1,0,1] = H[5,5]; c[0,1,1,0] = H[5,5]

    return c


def cijkl_to_Hij(c):
    """Converts a 4th order rigidity tensor to a Hooke's matrix

    Parameters
    ----------

    c: 3x3x3x3 np.ndarray
        the 4th order rigidity tensor

    Returns
    -------

    H: 6x6 np.ndarray
        The corresponding Hooke's matrix
    """

    T = np.array([
        [c[0,0,0,0], c[0,0,1,1], c[0,0,2,2], c[0,0,1,2], c[0,0,0,2], c[0,0,0,1]],
        [c[1,1,0,0], c[1,1,1,1], c[1,1,2,2], c[1,1,1,2], c[1,1,0,2], c[1,1,0,1]],
        [c[2,2,0,0], c[2,2,1,1], c[2,2,2,2], c[2,2,1,2], c[2,2,0,2], c[2,2,0,1]],
        [c[1,2,0,0], c[1,2,1,1], c[1,2,2,2], c[1,2,1,2], c[1,2,0,2], c[1,2,0,1]],
        [c[0,2,0,0], c[0,2,1,1], c[0,2,2,2], c[0,2,1,2], c[0,2,0,2], c[0,2,0,1]],
        [c[0,1,0,0], c[0,1,1,1], c[0,1,2,2], c[0,1,1,2], c[0,1,0,2], c[0,1,0,1]],
    ], dtype=c.dtype)
    return T
